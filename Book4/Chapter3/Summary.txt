IN THIS CHAPTER:
»»Working with the ArrayList class
»»Creating an array list
»»Introducing generics
»»Adding elements to an array list
»»Deleting elements from or modifying
   elements in an array list.

* Using the ArrayList Class:
- Java’s collection classes are designed to simplify the programming for applications
  that have to keep track of groups of objects. These classes are very powerful and
  surprisingly easy to use — at least the basics, anyway. The more advanced features
  of collection classes take some serious programming to get right, but for
  most applications, a few simple methods are all you need to use collection classes.

* Understanding the ArrayList Class:
- An array list is the most basic type of Java collection.
- It’s similar to an array but averts many of the most
common problems of working with arrays, specifically the following:
»»An array list automatically resizes itself whenever necessary.
»»An array list lets you insert elements into the middle of the collection.
»»An array list lets you delete items.
»»The ArrayList class actually uses an array internally to store the data
you add to the array list.

* Creating an ArrayList Object:
- To create an array list, you first declare an ArrayList variable and then call the
  ArrayList constructor to instantiate an ArrayList object and assign it to the
  variable.

Here are a few things to note about creating array lists:
»»The ArrayList class is in the java.util package, so your program must
   import either java.util.ArrayList or java.util.*.
»»Unlike an array, an array list doesn’t make you specify a capacity — though
   you can if you want.
»»The capacity of an array list is not a fixed limit. The ArrayList class automatically
   increases the list’s capacity whenever necessary.
»»The ArrayList class also has a constructor that lets you specify another
   collection object (typically, another array list) whose items are copied into the
   new array list.

* Adding Elements:
- After you create an array list, you can use the add method to add objects to the
  array list.
- If you specified a type when you created the array list, the objects you add via the
  add method must be of the correct type.

Here are some important points to keep in mind when you add elements to array
lists:
»»If an array list is already at its capacity when you add an element, the array list
   automatically expands its capacity. Although this capacity is flexible, it’s also
   inefficient.
»»Like arrays, array lists are indexed starting with zero. Keep this in mind when
   you use the version of the add method that accepts an index number.
»»The add method that inserts elements at a specific index position throws the
   unchecked exception IndexOutOfBoundsException if an object isn’t already
   at the index position you specify.

* Accessing Elements:
- To access a specific element in an array list, you can use the get method, which
 specifies the index value of the element you want to retrieve.
- The easiest way to access all the elements in an array list is to use an enhanced for
  statement, which lets you retrieve the elements without bothering with indexes or the get 
  method.
- If you need to know the index number of a particular object in an array list, and you have
  a reference to the object, you can use the indexOf method.

* Using an iterator:
- Another way to access all the elements in an array list, is to use an iterator. An iterator 
  is a special type of object whose sole purpose in life is to let you step through the elements
  of a collection.
- An iterator object implements the Iterator interface, which is defined as part
  of the java.util package.
- To use an iterator, you first call the array list’s iterator method to get the iterator.
  Then you use the iterator’s hasNext and next methods to retrieve each item in
  the collection.

* The iterattor pattern:
- Java’s iterators follow a common design pattern called the Iterator pattern, which is
  useful whenever you need to provide sequential access to a collection of objects.
- The Iterator interface itself defines the methods used for sequential access. The
  common pattern is for this interface to provide at least two methods:
• hasNext: Returns a boolean value that indicates whether another item is
  available.
• next: Returns the next item.

- Note that the object returned by the next method must be cast to a String. That’s
 because the Iterator interface has no knowledge of the type of objects stored in
 the collection.

* Updating Elements:
- Because array lists contain references to objects, not the objects themselves, any
  changes you make to an object in an array list are automatically reflected in the
  list. As a result, you don’t often have to use the set method.

* Deleting Elements:
- The ArrayList class provides several methods that let you remove elements from
  the collection. To remove all the elements, use the clear method.
- To remove a specific element, use the remove method. It lets you remove an element
  based on the index number.

Here are a few important details to keep in mind:
»»The clear and remove methods don’t actually delete objects; they simply
   remove the references to the objects from the array list. Like any other
   objects, the objects in a collection are deleted automatically by the garbage
   collector — and then only if the objects are no longer being referenced by
   the program.
»»You can remove more than one element at the same time by using the
   removeRange method. On it, you specify the starting and ending index
   numbers. (Note that this method removes all elements between the elements
   you specify, but the elements you specify aren’t themselves removed.
   removeRange(5, 8), for example, removes elements 6 and 7, but elements 5
   and 8 aren’t removed.)
»»You can also use the removeAll method to remove all the objects in one
   collection from another collection. A similar method, retainAll, removes all
   the objects that are not in another collection.



















