Working with Packages and the New Java Module System.

*IN THIS CHAPTER:
»»Creating packages for your classes
»»Archiving your packages in JAR files
»»Documenting your classes with
   JavaDocs
»»Using the Java Module System.

* Working with Packages:
- A package is a group of classes that belong together.
- Packages let you organize this mass into smaller, manageable collections
  of related classes.

* Importing classes and packages:
- When you use import statements at the beginning of a Java source file, you make
  classes from the packages mentioned in the import statements available throughout
  the file.
- Note: You don’t have to use an import statement to use a class from a package.
  But if you don’t use an import statement, you must fully qualify any references to
  the class.
- You never have to explicitly import two packages:
»»java.lang: This package contains classes that are so commonly used that the
   Java compiler makes them available to every program.
»»The default package: This package contains classes that aren’t specifically
   put in some other package.

* Creating your own packages:
1. Pick a name for your package.
2. Choose a directory on your hard drive to be the root of your class library.
3. Create subdirectories within the root directory for your package name.
4. Add the root directory for your package to the ClassPath environment
  variable.
5. Save the files for any classes you want to be in a particular package in the
  directory for that package.
6. Add a package statement to the beginning of each source file that
  belongs in a package.

* Putting Your Classes in a JAR File:
- A JAR file is a single file that can contain more than one class in a compressed
  format that the Java Runtime Environment can access quickly. (JAR stands for
  Java archive.)
- JAR files are created by the jar utility, which you find in the Java bin directory
  along with the other Java command-line tools, such as java and javac. JAR files
  are similar in format to Zip files, a compressed format made popular by the PKZIP
  program.

* jar command-line options:
- The jar command is an old-fashioned Unix-like command, complete with arcane
  command-line options that you have to get right if you expect to coax jar into
  doing something useful.

* Archiving a package:
- The most common use for the jar utility is to create an archive of an entire package.
- Here’s the procedure for archiving a package on a PC running
  any version of Windows:
1. Open a command window
2. Use a cd command to navigate to your package root.
3. Use a jar command that specifies the options cf, the name of the jar file,
  and the path to the class files you want to archive.
4. To verify that the jar file was created correctly, use the jar command
  that specifies the options tf and the name of the jar file.

* Adding a jar to your classpath:
- To use the classes in an archive, you must add the jar file to your ClassPath environment
  variable.
- To add an archive to the ClassPath variable, just add the complete path to the
  archive, making sure to separate it from any other paths already in the ClassPath
  with a semicolon.

- The first path in a ClassPath variable is always a single dot (.), which allows Java
  to find classes in the current directory.

* Running a program directly from an archive:
- A manifest file is a simple text file that contains information about the files in the
  archive.
- If your operating system is configured properly, you can also run the application
  by double-clicking an icon for the jar file.


* Using JavaDoc to Document Your Classes:
- Java provides a tool called JavaDoc that can automatically create fancy HTML-based
  documentation based on comments in your source files. All you have to do is add
  a comment for each public class, field, and method; then run the source files
  through the javadoc command.

* Adding JavaDoc comments:
- The basic rule for creating JavaDoc comments is that they begin with /** and end
  with */. You can place JavaDoc comments in any of three different locations in a
  source file:
»»Immediately before the declaration of a public class
»»Immediately before the declaration of a public field
»»Immediately before the declaration of a public method or constructor

* Using the javadoc command:
- The javadoc command has a few dozen options you can set, making it a complicated
  command to use. However, you can ignore all these options to create a basic
  set of documentation pages. Just specify the complete path to all the Java files you
  want to create documentation for.

* Viewing JavaDoc pages:
- After you run the javadoc command, you can access the documentation pages by
  starting with the index.html page. To quickly display this page, just type index.
  html at the command prompt after you run the javadoc command.

* Using the Java Module System:
- The fact that Project Jigsaw took so long to develop is a testament to the importance
  of the project. The Project Jigsaw developers wanted to make sure that they
  got it right, and also that the Java Module System would in no way break any
  existing applications that rely on the time-tested Java package system. In fact, the
  Java Module System is designed to work right alongside existing Java packages.

* Understanding modules:
- »»A module must explicitly list its dependencies
- »»A module must also explicitly list the visibility of any packages contained within
    the module.
- A JAR file that contains a module is called a modular
  JAR file. The only difference between a modular JAR file and a regular JAR file
  is that a modular JAR file contains a special class called module-info.class. The
  module-info.class class file identifies the module’s dependencies (that is, what
  other modules are required) and the packages that are visible to other modules. All
  this is done by means of a source file called module-info.java.

* The module-info.java file:
- The module-info.java file is a Java source file that defines a module. The module
  is defined by using a combination of several new Java language elements that are
  introduced by Java 9.

* Setting up folders for a module:
- Getting the source folders set up for a module is similar to setting up the folders
  for a package, but with the added requirement that the module-info.java file
  must be in the root folder for the module.

* Compiling a module:
- To compile a module, you can use the javac command from a command prompt,
  specifying the name of all the source files you want to compile.

* Creating a modular JAR file:
- The final step for creating a Java module is to assemble the compiled class files
  (including module-info.class) into a module JAR file.





















